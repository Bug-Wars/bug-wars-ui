{"version":3,"sources":["../../../projects/angular-responsive-carousel/src/lib/touches.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.component.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.module.ts"],"names":["Touches","properties","_this","this","eventType","undefined","handlers","startX","startY","lastTap","doubleTapMinTimeout","tapMinTimeout","touchstartTime","i","isMousedown","_touchListeners","touchstart","touchmove","touchend","_mouseListeners","mousedown","mousemove","mouseup","wheel","_otherListeners","resize","handleTouchstart","event","elementPosition","getElementPosition","Date","getTime","getTouchstartPosition","runHandler","handleTouchmove","touches","detectPan","detectPinch","detectLinearSwipe","swipeType","handleLinearSwipe","handleTouchend","detectDoubleTap","detectTap","length","handleMousedown","getMousedownPosition","handleMousemove","handleMouseup","handleWheel","handleResize","element","toggleEventListeners","Object","defineProperty","prototype","touchListeners","mouseListeners","otherListeners","destroy","action","listeners","listener","assign","detectTouchScreen","handler","window","addEventListener","removeEventListener","document","addEventListeners","removeEventListeners","getLinearSwipeType","eventName","response","currentTime","tapLength","clearTimeout","doubleTapTimeout","setTimeout","movementX","Math","abs","moveLeft","moveTop","getBoundingClientRect","clientX","left","clientY","top","index","prefixes","split","query","matchMedia","matches","mq","join","on","Carousel","initialPositionX","newContainerPositionIndex","preliminarySlideCounter","slideCounter","previousSlideCounter","isContentImages","isLazyLoad","isContainerLocked","alignCells","initialContainerPosition","isTouchstart","getStartX","containerInitialPositionX","getCarouselElementPosition","isMoveInProgress","stopTransformContainer","handleHorizontalSwipe","moveX","distanceAbs","getDistanceAbs","direction","getDirection","moveContainer","detectSlide","handleSlide","alignContainer","cells","children","visibleWidth","parentElement","clientWidth","setContainerWidth","images","cellLength","visibleCellsCount","overflowCellsLimit","isImagesLessCellLimit","floor","margin","minSwipeDistance","transitionDuration","transitionTimingFunction","cellWidth","ceil","fullCellWidth","totalContainerCellsCount","transformPositionX","setSlideCounter","isSlideInProgress","isSlideLengthLimited","positionX","getMovePositionX","distance","getDistance","duration","getContainerPosition","setInitialContainerPosition","correction","getContainerPositionCorrection","isContainerPositionCorrection","position","loop","quicklyPositionContainer","initialPosition","getNewContainerPosition","lineUpCells","containerWidth","getContainerWidth","style","width","totalImageWidth","getFile","cellIndex","imageIndex","getFileIndex","file","type","image","positionIndex","getPositionIndex","counter","lastCellIndex","value","transition","transform","next","prev","select","customSlideLength","slideLength","limitSlideLength","getSlideLength","handleLeftSlide","handleRightSlide","detectLastSlide","detectContainerUnlock","isFirstCell","newSlideCounter","isNextArrowDisabled","visibleCellsOverflowContainer","isPrevArrowDisabled","handleSlideEnd","transformSlideEnd","resetTransition","container","sign","cell","getCellPositionX","getCenterPositionIndex","autoplay","autoplayId","setInterval","autoplayInterval","stopAutoplay","clearInterval","CarouselComponent","elementRef","ref","minTimeout","_cellWidth","events","EventEmitter","height","pauseOnHover","dots","objectFit","counterSeparator","cellsToScroll","arrows","arrowsTheme","hostClassCarousel","carousel","isMoving","preventDefault","lapCounter","innerWidth","innerHeight","ua","navigator","userAgent","toLowerCase","indexOf","nativeElement","querySelector","_images","_isCounter","cellLimit","onWindowResize","landscapeMode","isLandscape","detectChanges","initCarousel","onMousemove","onMouseleave","ngOnInit","isNgContent","cellsElement","setDimensions","ngAfterViewInit","getCellLength","dotsArr","Array","fill","detectDomChanges","ngOnChanges","changes","ngOnDestroy","getCellWidth","videoProperties","MutationObserver","mutations","onDomChanges","observe","attributes","childList","characterData","hostStyleHeight","hostStyleWidth","handleTransitionendCellContainer","toggleVideo","video","noPlay","paused","play","isVideoPlaying","pause","getCurrentIndex","elementWidth","cellsToShow","Component","args","selector","exportAs","template","ElementRef","ChangeDetectorRef","Input","Output","HostBinding","HostListener","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap","entryComponents"],"mappings":"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","sourcesContent":["export interface Properties {\r\n    element: HTMLElement;\r\n    listeners?: 'auto' | 'mouse and touch';\r\n    touchListeners?: any;\r\n    mouseListeners?: any;\r\n    otherListeners?: any;\r\n    resize?: boolean;\r\n}\r\n\r\nexport type EventType = undefined | 'touchend' | 'pan' | 'pinch' | 'horizontal-swipe' | 'vertical-swipe' | 'tap' | 'longtap';\r\nexport type TouchHandler = 'handleTouchstart' | 'handleTouchmove' | 'handleTouchend';\r\nexport type MouseHandler = 'handleMousedown' | 'handleMousemove' | 'handleMouseup';\r\n\r\nexport class Touches {\r\n    properties: Properties;\r\n    element: HTMLElement;\r\n    elementPosition: ClientRect;\r\n    eventType: EventType = undefined;\r\n    handlers: any = {};\r\n    startX = 0;\r\n    startY = 0;\r\n    lastTap = 0;\r\n    doubleTapTimeout: any;\r\n    doubleTapMinTimeout = 300;\r\n    tapMinTimeout = 200;\r\n    touchstartTime = 0;\r\n    i: number = 0;\r\n    isMousedown = false;\r\n\r\n    _touchListeners: any = {\r\n        \"touchstart\": \"handleTouchstart\",\r\n        \"touchmove\": \"handleTouchmove\",\r\n        \"touchend\": \"handleTouchend\"\r\n    }\r\n    _mouseListeners: any = {\r\n        \"mousedown\": \"handleMousedown\",\r\n        \"mousemove\": \"handleMousemove\",\r\n        \"mouseup\": \"handleMouseup\",\r\n        \"wheel\": \"handleWheel\"\r\n    }\r\n    _otherListeners: any = {\r\n        \"resize\": \"handleResize\"\r\n    }\r\n\r\n    get touchListeners() {\r\n        return this.properties.touchListeners ? this.properties.touchListeners : this._touchListeners;\r\n    }\r\n\r\n    get mouseListeners() {\r\n        return this.properties.mouseListeners ? this.properties.mouseListeners : this._mouseListeners;\r\n    }\r\n\r\n    get otherListeners() {\r\n        return this.properties.otherListeners ? this.properties.otherListeners : this._otherListeners;\r\n    }\r\n\r\n    constructor(properties: Properties) {\r\n        this.properties = properties;\r\n        this.element = this.properties.element;\r\n        this.elementPosition = this.getElementPosition();\r\n\r\n        this.toggleEventListeners('addEventListener');\r\n    }\r\n\r\n    destroy() {\r\n        this.toggleEventListeners('removeEventListener');\r\n    }\r\n\r\n    toggleEventListeners(action: 'addEventListener' | 'removeEventListener') {\r\n        let listeners;\r\n\r\n        if (this.properties.listeners === 'mouse and touch') {\r\n            listeners = Object.assign(this.touchListeners, this.mouseListeners);\r\n        } else {\r\n            listeners = this.detectTouchScreen() ? this.touchListeners : this.mouseListeners;\r\n        }\r\n\r\n        if (this.properties.resize) {\r\n            listeners = Object.assign(listeners, this.otherListeners);\r\n        }\r\n\r\n        for (var listener in listeners) {\r\n            const handler: MouseHandler = listeners[listener];\r\n\r\n            // Window\r\n            if (listener === \"resize\") {\r\n                if (action === 'addEventListener') {\r\n                    window.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    window.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Document\r\n            } else if (listener === 'mouseup' || listener === \"mousemove\") {\r\n                if (action === 'addEventListener') {\r\n                    document.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    document.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Element\r\n            } else {\r\n                if (action === 'addEventListener') {\r\n                    this.element.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    this.element.removeEventListener(listener, this[handler], false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addEventListeners(listener: string, handler: string) {\r\n        window.addEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    removeEventListeners(listener: string, handler: string) {\r\n        window.removeEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    /*\r\n     * Listeners\r\n     */\r\n\r\n    /* Touchstart */\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getTouchstartPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"touchstart\", event);\r\n    }\r\n\r\n\r\n    /* Touchmove */\r\n\r\n    handleTouchmove = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Pan\r\n        if (this.detectPan(touches)) {\r\n            this.runHandler(\"pan\", event);\r\n        }\r\n\r\n        // Pinch\r\n        if (this.detectPinch(event)) {\r\n            this.runHandler(\"pinch\", event);\r\n        }\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n    handleLinearSwipe(event: any) {\r\n        //event.preventDefault();\r\n\r\n        this.i++;\r\n\r\n        if (this.i > 3) {\r\n            this.eventType = this.getLinearSwipeType(event);\r\n        }\r\n\r\n        if (this.eventType === 'horizontal-swipe') {\r\n            this.runHandler('horizontal-swipe', event);\r\n        }\r\n\r\n        if (this.eventType === 'vertical-swipe') {\r\n            this.runHandler('vertical-swipe', event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Touchend */\r\n\r\n    handleTouchend = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Double Tap\r\n        if (this.detectDoubleTap()) {\r\n            this.runHandler(\"double-tap\", event);\r\n        }\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.runHandler(\"touchend\", event);\r\n        this.eventType = 'touchend';\r\n\r\n        if (touches && touches.length === 0) {\r\n            this.eventType = undefined;\r\n            this.i = 0;\r\n        }\r\n    }\r\n\r\n\r\n    /* Mousedown */\r\n\r\n    handleMousedown = (event: any) => {\r\n        this.isMousedown = true;\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getMousedownPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"mousedown\", event);\r\n    }\r\n\r\n\r\n    /* Mousemove */\r\n\r\n    handleMousemove = (event: any) => {\r\n        //event.preventDefault();\r\n        \r\n        if (!this.isMousedown) {\r\n            return;\r\n        }\r\n\r\n        // Pan\r\n        this.runHandler(\"pan\", event);\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Mouseup */\r\n\r\n    handleMouseup = (event: any) => {\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.isMousedown = false;\r\n        this.runHandler(\"mouseup\", event);\r\n        this.eventType = undefined;\r\n        this.i = 0;\r\n    }\r\n\r\n\r\n    /* Wheel */\r\n\r\n    handleWheel = (event: any) => {\r\n        this.runHandler(\"wheel\", event);\r\n    }\r\n\r\n    /* Resize */\r\n\r\n    handleResize = (event: any) => {\r\n        this.runHandler(\"resize\", event);\r\n    }\r\n\r\n    runHandler(eventName: any, response: any) {\r\n        if (this.handlers[eventName]) {\r\n            this.handlers[eventName](response);\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Detection\r\n     */\r\n\r\n    detectPan(touches: any) {\r\n        return touches.length === 1 && !this.eventType || this.eventType === 'pan';\r\n    }\r\n\r\n    detectDoubleTap() {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.lastTap;\r\n\r\n        clearTimeout(this.doubleTapTimeout);\r\n\r\n        if (tapLength < this.doubleTapMinTimeout && tapLength > 0) {\r\n            return true;\r\n        } else {\r\n            this.doubleTapTimeout = setTimeout(() => {\r\n                clearTimeout(this.doubleTapTimeout);\r\n            }, this.doubleTapMinTimeout);\r\n        }\r\n        this.lastTap = currentTime;\r\n    }\r\n\r\n    detectTap(): void {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.touchstartTime;\r\n\r\n        if (tapLength > 0) {\r\n            if (tapLength < this.tapMinTimeout) {\r\n                this.runHandler(\"tap\", event);\r\n            } else {\r\n                this.runHandler(\"longtap\", event);\r\n            }\r\n        }\r\n    }\r\n\r\n    detectPinch(event: any) {\r\n        const touches = event.touches;\r\n        return (touches.length === 2 && this.eventType === undefined) || this.eventType === 'pinch';\r\n    }\r\n\r\n    detectLinearSwipe(event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            if (touches.length === 1 && !this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        } else {\r\n            if (!this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    getLinearSwipeType(event: any) {\r\n        if (this.eventType !== 'horizontal-swipe' && this.eventType !== 'vertical-swipe') {\r\n            const movementX = Math.abs(this.moveLeft(0, event) - this.startX);\r\n            const movementY = Math.abs(this.moveTop(0, event) - this.startY);\r\n\r\n            if ((movementY * 3) > movementX) {\r\n                return 'vertical-swipe';\r\n            } else {\r\n                return 'horizontal-swipe';\r\n            }\r\n        } else {\r\n            return this.eventType;\r\n        }\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getTouchstartPosition(event: any) {\r\n        this.startX = event.touches[0].clientX - this.elementPosition.left;\r\n        this.startY = event.touches[0].clientY - this.elementPosition.top;\r\n    }\r\n\r\n    getMousedownPosition(event: any) {\r\n        this.startX = event.clientX - this.elementPosition.left;\r\n        this.startY = event.clientY - this.elementPosition.top;\r\n    }\r\n\r\n    moveLeft(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientX - this.elementPosition.left;\r\n        } else {\r\n            return event.clientX - this.elementPosition.left;\r\n        }\r\n    }\r\n\r\n    moveTop(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientY - this.elementPosition.top;\r\n        } else {\r\n            return event.clientY - this.elementPosition.top;\r\n        }\r\n    }\r\n\r\n    detectTouchScreen() {\r\n        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\r\n        var mq = function(query: any) {\r\n            return window.matchMedia(query).matches;\r\n        }\r\n\r\n        if (('ontouchstart' in window)) {\r\n            return true;\r\n        }\r\n\r\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\r\n        // https://git.io/vznFH\r\n        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\r\n        return mq(query);\r\n    }\r\n\r\n\r\n    /* Public properties and methods */\r\n    on(event: EventType, handler: Function) {\r\n        if (event) {\r\n            this.handlers[event] = handler;\r\n        }\r\n    }\r\n}","export interface Properties {\r\n    element: HTMLElement;\r\n    container: HTMLElement;\r\n    images: any;\r\n    cellWidth: number;\r\n    loop: boolean;\r\n    autoplayInterval: number;\r\n    overflowCellsLimit: number;\r\n    visibleWidth: number;\r\n    margin: number;\r\n    minSwipeDistance: number;\r\n    transitionDuration: number;\r\n    transitionTimingFunction: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear';\r\n    videoProperties: any;\r\n}\r\n\r\nexport class Carousel {\r\n    properties: Properties;\r\n    element: HTMLElement;\r\n    startX: number;\r\n    moveX: number;\r\n    direction: 'left' | 'right';\r\n    slideLength: number;\r\n    distanceAbs: number;\r\n    initialPositionX: number = 0;\r\n    cells: HTMLCollection;\r\n\r\n    /* The index of the new position relative to the active index, for example -1 or +1 */\r\n    newContainerPositionIndex: number = 0;\r\n\r\n    preliminarySlideCounter: number = 0;\r\n\r\n    /* Scrolling Index (counter) */\r\n    slideCounter: number = 0;\r\n\r\n    previousSlideCounter: number = 0;\r\n    isSlideInProgress: boolean;\r\n    isMoveInProgress: boolean;\r\n    isTouchstart: boolean;\r\n\r\n    /* The slide length has been limited by the limitSlideLength() method */\r\n    isSlideLengthLimited: boolean;\r\n\r\n    isContainerPositionCorrection: boolean;\r\n    containerInitialPositionX: number;\r\n    isContentImages: boolean = true;\r\n    visibleWidth: number;\r\n    isLazyLoad: boolean = true;\r\n    isContainerLocked: boolean = true;\r\n    alignCells: \"left\" | \"center\" = \"left\";\r\n    initialContainerPosition: number = 0;\r\n    autoplayId: any;\r\n\r\n    get cellLength() {\r\n        if (this.images) {\r\n            return this.images.length;\r\n        } else {\r\n            return this.cells.length;\r\n        }\r\n    }\r\n\r\n    get totalContainerCellsCount() {\r\n        if (this.images) {\r\n            let cellLength = this.visibleCellsCount + this.overflowCellsLimit * 2;\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get isFirstCell() {\r\n        return this.slideCounter === 0;\r\n    }\r\n\r\n    get lastCellIndex() {\r\n        return this.images.length ? (this.images.length - 1) : (this.cells.length - 1);\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        if (this.images && this.isImagesLessCellLimit) {\r\n            return Math.floor((this.images.length - this.visibleCellsCount) / 2);\r\n        } else {\r\n            return this.properties.overflowCellsLimit;\r\n        }\r\n    }\r\n\r\n    get isImagesLessCellLimit() {\r\n        return this.properties.overflowCellsLimit * 2 + this.visibleCellsCount > this.images.length;\r\n    }\r\n\r\n    get cellLimit() {\r\n        return this.visibleCellsCount + this.overflowCellsLimit * 2;\r\n    }\r\n\r\n    get images() {\r\n        return this.properties.images;\r\n    }\r\n\r\n    get margin() {\r\n        return this.properties.margin;\r\n    }\r\n\r\n    get minSwipeDistance() {\r\n        return this.properties.minSwipeDistance;\r\n    }\r\n\r\n    get transitionDuration() {\r\n        return this.properties.transitionDuration;\r\n    }\r\n\r\n    get transitionTimingFunction() {\r\n        return this.properties.transitionTimingFunction;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.properties.cellWidth + this.margin;\r\n    }\r\n\r\n    get visibleCellsCount() {\r\n        return Math.ceil(this.visibleWidth / this.fullCellWidth);\r\n    }\r\n\r\n    get lapCounter() {\r\n        return Math.floor(this.slideCounter / this.totalContainerCellsCount);\r\n    }\r\n\r\n    get visibleCellsOverflowContainer() {\r\n        return (this.visibleCellsCount * this.fullCellWidth -this.margin) > this.visibleWidth;\r\n    }\r\n\r\n    constructor(properties: Properties) {\r\n        this.element = properties.element;\r\n        this.properties = properties;\r\n        this.cells = this.element.children;\r\n        this.visibleWidth = this.properties.visibleWidth || this.element.parentElement.clientWidth;\r\n\r\n        this.setContainerWidth();\r\n        this.alignContainer(0);\r\n    }\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.isTouchstart = true;\r\n        this.startX = this.getStartX(event);\r\n        this.containerInitialPositionX = this.getElementPosition()['left'] - this.getCarouselElementPosition()['left'];\r\n        this.isMoveInProgress = true;\r\n        this.stopTransformContainer();\r\n    }\r\n\r\n    stopTransformContainer() {\r\n        this.transformPositionX(this.containerInitialPositionX, 0);\r\n        this.setSlideCounter();\r\n        this.isSlideInProgress = false;\r\n        this.newContainerPositionIndex = 0;\r\n        this.isSlideLengthLimited = undefined;\r\n    }\r\n\r\n    getStartX(event: any) {\r\n        const touches = event.touches;\r\n        let startX;\r\n\r\n        if (touches) {\r\n            startX = touches[0].clientX - this.getCarouselElementPosition()['left'];\r\n        } else {\r\n            startX = event.clientX - this.getCarouselElementPosition()['left'];\r\n        }\r\n\r\n        return startX;\r\n    }\r\n\r\n    handleHorizontalSwipe = (event: any) => {\r\n        const touches = event.touches;\r\n        if (touches) {\r\n            this.moveX = touches[0].clientX - this.getCarouselElementPosition()['left'];\r\n        } else {\r\n            this.moveX = event.clientX - this.getCarouselElementPosition()['left'];\r\n        }\r\n        this.distanceAbs = this.getDistanceAbs();\r\n        this.direction = this.getDirection();\r\n\r\n        this.moveContainer();\r\n    }\r\n\r\n    handleTouchend = (event: any) => {\r\n        if (!this.isTouchstart) {\r\n            this.isTouchstart = false;\r\n            return;\r\n        }\r\n\r\n        this.isMoveInProgress = false;\r\n\r\n        if (this.detectSlide()) {\r\n            this.handleSlide();\r\n        } else {\r\n            this.newContainerPositionIndex = 0;\r\n            this.alignContainer();\r\n        }\r\n\r\n        this.startX = this.moveX = this.distanceAbs = undefined;\r\n        this.isTouchstart = false;\r\n    }\r\n\r\n    /* Move */\r\n    moveContainer() {\r\n        let positionX = this.getMovePositionX();\r\n        this.transformPositionX(positionX, 0);\r\n    }\r\n\r\n    getMovePositionX() {\r\n        const distance = this.getDistance();\r\n        return this.containerInitialPositionX - distance;\r\n    }\r\n\r\n    /* Align */\r\n    alignContainer(duration: number = this.transitionDuration) {\r\n        let positionX = this.getContainerPosition();\r\n        this.transformPositionX(positionX, duration);\r\n        this.setInitialContainerPosition(positionX);\r\n    }\r\n\r\n    getContainerPosition() {\r\n        let correction = this.getContainerPositionCorrection();\r\n\r\n        this.isContainerPositionCorrection = correction != 0;\r\n        return (this.initialContainerPosition + this.newContainerPositionIndex * this.fullCellWidth) + correction;\r\n    }\r\n\r\n    setInitialContainerPosition(position) {\r\n        let correction = this.getContainerPositionCorrection();\r\n        this.initialContainerPosition = position - correction;\r\n    }\r\n\r\n    /* Offset the container to show the last cell completely */\r\n    getContainerPositionCorrection() {\r\n        let correction = 0;\r\n\r\n        if (this.properties.loop) {\r\n            return 0;\r\n        }\r\n\r\n        if ((this.cellLength - this.preliminarySlideCounter) < this.visibleCellsCount || this.isSlideLengthLimited) {\r\n            if (this.visibleWidth < this.totalContainerCellsCount * this.fullCellWidth) {\r\n                correction = - (this.visibleCellsCount * this.fullCellWidth - this.visibleWidth - this.margin);\r\n            }\r\n\r\n            if (correction >= - this.margin) {\r\n                correction = 0;\r\n            }\r\n        }\r\n\r\n        return correction;\r\n    }\r\n\r\n    /* Quickly center */\r\n    quicklyPositionContainer() {\r\n        let correction = this.getContainerPositionCorrection();\r\n        const initialPosition = this.getNewContainerPosition() + correction;\r\n        this.transformPositionX(initialPosition, 0);\r\n        this.setInitialContainerPosition(initialPosition);\r\n    }\r\n\r\n    getNewContainerPosition() {\r\n        if (this.slideCounter > this.overflowCellsLimit) {\r\n            if (this.alignCells === \"left\") {\r\n                this.lineUpCells();\r\n                return -(this.overflowCellsLimit * this.fullCellWidth);\r\n            }\r\n        }\r\n\r\n        if (this.slideCounter <= this.overflowCellsLimit) {\r\n            if (this.previousSlideCounter > this.overflowCellsLimit) {\r\n                this.lineUpCells();\r\n            }\r\n            return -(this.slideCounter * this.fullCellWidth);\r\n        }\r\n    }\r\n\r\n    setContainerWidth() {\r\n        const containerWidth = this.getContainerWidth();\r\n        this.element.style.width = containerWidth + \"px\";\r\n    }\r\n\r\n    getContainerWidth() {\r\n        let containerWidth = this.totalContainerCellsCount * this.fullCellWidth;\r\n        let totalImageWidth = this.cellLength * this.fullCellWidth;\r\n\r\n        if (totalImageWidth < containerWidth) {\r\n            containerWidth = totalImageWidth;\r\n        }\r\n\r\n        return containerWidth;\r\n    }\r\n\r\n    getFile(cellIndex) {\r\n        let imageIndex = this.getFileIndex(cellIndex); \r\n        let file = this.images[imageIndex];\r\n\r\n        if (file && !file.type) {\r\n            file.type = 'image';\r\n        }\r\n\r\n        return {\r\n            image: this.images[imageIndex],\r\n            imageIndex\r\n        };\r\n    }\r\n\r\n    getFileIndex(cellIndex: number) {\r\n        const positionIndex = this.getPositionIndex(cellIndex);\r\n        const numberLeftCells = (this.totalContainerCellsCount - 1) / 2;\r\n        let imageIndex;\r\n        let counter = this.slideCounter;\r\n\r\n        if (!this.isContainerLocked) {\r\n            if (counter <= this.overflowCellsLimit) {\r\n                return cellIndex;\r\n            } else {\r\n                let cellLimitOverflow = counter - this.overflowCellsLimit;\r\n                imageIndex = positionIndex + cellLimitOverflow;\r\n\r\n                if (this.images && this.properties.loop) {\r\n                    imageIndex = imageIndex % this.images.length;\r\n                }\r\n\r\n                return imageIndex;\r\n            }\r\n        }\r\n\r\n        if (this.alignCells === \"left\") {\r\n            if (counter > this.overflowCellsLimit) {\r\n                let cellLimitOverflow = counter - this.overflowCellsLimit;\r\n                imageIndex = positionIndex + cellLimitOverflow;\r\n            } else {\r\n                imageIndex = cellIndex;\r\n            }\r\n        }\r\n\r\n        if (imageIndex > this.lastCellIndex && !this.properties.loop) {\r\n            return false;\r\n        }\r\n\r\n        return imageIndex;\r\n    }\r\n\r\n    transformPositionX(value, duration = this.transitionDuration) {\r\n        this.element.style.transition = 'transform ' + duration + 'ms ' + this.transitionTimingFunction;\r\n        this.element.style.transform = 'translateX(' + value + 'px)';\r\n    }\r\n\r\n    detectSlide() {\r\n        return this.distanceAbs >= this.minSwipeDistance;\r\n    }\r\n\r\n    next(length: number = 1) {\r\n        this.newContainerPositionIndex = 0;\r\n        this.direction = 'left';\r\n        this.handleSlide(length);\r\n    }\r\n\r\n    prev(length: number = 1) {\r\n        this.newContainerPositionIndex = 0;\r\n        this.direction = 'right';\r\n        this.handleSlide(length);\r\n    }\r\n\r\n    select(index: number) {\r\n        this.slideCounter = index;\r\n        this.quicklyPositionContainer();\r\n    }\r\n\r\n    handleSlide(customSlideLength: number = undefined) {\r\n        let isUsingButton = customSlideLength;\r\n\r\n        if (isUsingButton && this.isSlideInProgress) {\r\n            return;\r\n        }\r\n\r\n        this.slideLength = customSlideLength ? customSlideLength : this.limitSlideLength(this.getSlideLength());\r\n\r\n        if (this.direction === 'left') {\r\n            this.handleLeftSlide();\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            this.handleRightSlide();\r\n        }\r\n\r\n        this.alignContainer();\r\n    }\r\n\r\n    handleLeftSlide() {\r\n        this.preliminarySlideCounter = this.slideCounter + this.slideLength;\r\n        let isLastSlide = this.detectLastSlide(this.slideCounter + this.slideLength);\r\n\r\n        if (!isLastSlide) {\r\n            this.newContainerPositionIndex = this.newContainerPositionIndex - this.slideLength;\r\n            this.isSlideInProgress = true;\r\n\r\n            if (this.isLazyLoad) {\r\n                this.isContainerLocked = this.preliminarySlideCounter > this.overflowCellsLimit;\r\n\r\n                if (this.detectContainerUnlock()) {\r\n                    this.isContainerLocked = false;\r\n                }\r\n            }\r\n        } else {\r\n            this.slideLength = 0;\r\n        }\r\n    }\r\n\r\n    handleRightSlide() {\r\n        if (this.slideCounter - this.slideLength < 0) {\r\n            this.slideLength = this.slideCounter;\r\n        }\r\n\r\n        this.preliminarySlideCounter = this.slideCounter - this.slideLength;\r\n\r\n        if (!this.isFirstCell) {\r\n            this.newContainerPositionIndex = this.newContainerPositionIndex + this.slideLength;\r\n            this.isSlideInProgress = true;\r\n\r\n            if (this.isLazyLoad) {\r\n                if (this.preliminarySlideCounter > this.overflowCellsLimit) {\r\n                    this.isContainerLocked = true;\r\n                } else {\r\n                    this.isContainerLocked = false;\r\n                }\r\n\r\n                if (this.detectContainerUnlock()) {\r\n                    this.isContainerLocked = false;\r\n                }\r\n            }\r\n        } else {\r\n            this.slideLength = 0;\r\n        }\r\n    }\r\n\r\n    getSlideLength() {\r\n        let correction = this.getContainerPositionCorrection();\r\n        let length = Math.floor((this.distanceAbs + correction) / this.fullCellWidth);\r\n\r\n        if (this.distanceAbs % this.fullCellWidth >= this.minSwipeDistance) {\r\n            length++;\r\n        }\r\n        return length;\r\n    }\r\n\r\n    /*  \r\n     * Limits the length of the slide during calls to the next() and prev() \r\n     * methods if the specified position is outside the cell length \r\n     */\r\n    limitSlideLength(slideLength: number) {\r\n        if (slideLength > 1) {\r\n\r\n            for (var i = 0; i < slideLength; i++) {\r\n                let newSlideCounter = this.slideCounter + (slideLength - i);\r\n\r\n                if (!this.detectLastSlide(newSlideCounter)) {\r\n                    slideLength = slideLength - i;\r\n                    this.isSlideLengthLimited = i > 0;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return slideLength;\r\n    }\r\n\r\n    detectLastSlide(slideCounter: number) {\r\n        if (this.properties.loop) {\r\n            return false;\r\n        } else {\r\n            return (this.cellLength - slideCounter) < this.visibleCellsCount;\r\n        }\r\n    }\r\n\r\n    isNextArrowDisabled() {\r\n        if (this.visibleCellsOverflowContainer) {\r\n            return this.detectLastSlide(this.slideCounter + 1) && this.isContainerPositionCorrection;\r\n        } else {\r\n            return this.detectLastSlide(this.slideCounter + 1);\r\n        }\r\n    }\r\n\r\n    isPrevArrowDisabled() {\r\n        return this.slideCounter === 0;\r\n    }\r\n\r\n    detectContainerUnlock() {\r\n        return (this.cellLength - this.preliminarySlideCounter) < (this.visibleCellsCount + this.overflowCellsLimit);\r\n    }\r\n\r\n    handleSlideEnd() {\r\n        if (this.isSlideInProgress) {\r\n            this.transformSlideEnd();\r\n\r\n            this.isSlideInProgress = false;\r\n            this.newContainerPositionIndex = 0;\r\n            this.isSlideLengthLimited = undefined;\r\n        }\r\n    }\r\n\r\n    transformSlideEnd() {\r\n        if (this.isLazyLoad) {\r\n            this.setSlideCounter();\r\n            if (this.images || !this.images && this.properties.loop) {\r\n                this.quicklyPositionContainer();\r\n            }\r\n        }\r\n\r\n        this.previousSlideCounter = this.slideCounter;\r\n    }\r\n\r\n    setSlideCounter() {\r\n        if (this.direction === 'left') {\r\n            this.slideCounter = this.slideCounter + this.slideLength;\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            this.slideCounter = this.slideCounter - this.slideLength;\r\n        }\r\n\r\n        this.direction = undefined;\r\n        this.slideLength = 0;\r\n    }\r\n\r\n    resetTransition() {\r\n        this.element.style.transition = '';\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getCarouselElementPosition() {\r\n        return this.properties.container.getBoundingClientRect();\r\n    }\r\n\r\n    getDistance() {\r\n        return this.startX - this.moveX;\r\n    }\r\n\r\n    getDistanceAbs() {\r\n        return Math.abs(this.startX - this.moveX);\r\n    }\r\n\r\n    getDirection() {\r\n        const direction = Math.sign(this.startX - this.moveX);\r\n\r\n        if (direction === -1) {\r\n            return 'right';\r\n        }\r\n        if (direction === 1) {\r\n            return 'left';\r\n        }\r\n    }\r\n\r\n    lineUpCells() {\r\n        const cells = this.element.children;\r\n\r\n        for (var i = 0; i < cells.length; i++) {\r\n            let cell = cells[i];\r\n            let positionX = this.getCellPositionX(i);\r\n            (cell as HTMLElement).style.transform = 'translateX(' + positionX + 'px)';\r\n\r\n            // notice\r\n            (cell as HTMLElement).style.width = this.properties.cellWidth+'px';\r\n        };\r\n    }\r\n\r\n    getCellPositionX(index) {\r\n        let positionIndex = this.getPositionIndex(index);\r\n        return positionIndex * this.fullCellWidth;\r\n    }\r\n\r\n    getPositionIndex(cellIndex) {\r\n        let counter = this.slideCounter;\r\n        let cellLength = this.totalContainerCellsCount;\r\n        let slideCounter = counter - this.overflowCellsLimit;\r\n        let positionIndex;\r\n\r\n        if (slideCounter > cellLength) {\r\n            slideCounter = slideCounter % cellLength;\r\n        }\r\n\r\n        if (slideCounter < 0) {\r\n            return cellIndex;\r\n        } else {\r\n            positionIndex = cellIndex - slideCounter;\r\n            if (positionIndex < 0) {\r\n                positionIndex = cellLength + positionIndex;\r\n            }\r\n        }\r\n\r\n        return positionIndex;\r\n    }\r\n\r\n    getCenterPositionIndex() {\r\n        return (this.totalContainerCellsCount - 1) / 2;\r\n    }\r\n\r\n    autoplay() {\r\n        this.autoplayId = setInterval(() => {\r\n            this.next(); \r\n        }, this.properties.autoplayInterval);\r\n    }\r\n\r\n    stopAutoplay() {\r\n        if (this.autoplayId) {\r\n            clearInterval(this.autoplayId);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.stopAutoplay();\r\n    }\r\n}","import {ChangeDetectorRef, Component, ElementRef, ViewChild, EventEmitter, HostBinding, HostListener, Input, Output, OnDestroy, SimpleChanges} from '@angular/core';\n\nimport {Images} from './interfaces';\nimport {Touches} from './touches';\nimport {Carousel} from './carousel';\n\n\n@Component({\n\tselector: 'carousel, [carousel]',\n    exportAs: 'carousel',\n\ttemplateUrl: './carousel.component.html',\n    styleUrls: ['./carousel.component.sass']\n})\n\nexport class CarouselComponent implements OnDestroy {\n\n    get isContainerLocked() {\n        return this.carousel.isContainerLocked;\n    }\n    get slideCounter() {\n        return this.carousel.slideCounter;\n    }\n    get previousSlideCounter() {\n        return this.carousel.previousSlideCounter;\n    }\n    get lapCounter() {\n        return this.carousel.lapCounter;\n    }\n\n    lineUpCells() {\n        this.carousel.lineUpCells();\n    }\n\n    quicklyPositionContainer() {\n        this.carousel.quicklyPositionContainer();\n    }\n    \n    _id: string;\n    _images: Images;\n    touches: any;\n    carousel: any;\n    landscapeMode: any;\n    minTimeout = 30;\n    isVideoPlaying: boolean;\n    _isCounter: boolean;\n    _width: number;\n    _cellWidth: number | '100%' = 200;\n    isMoving: boolean;\n    isNgContent: boolean;\n    cellLength: number;\n    dotsArr:any;\n\n    get isLandscape(){\n        return window.innerWidth > window.innerHeight;\n    }\n\n    get isSafari(): any {\n        const ua = navigator.userAgent.toLowerCase();\n        if (ua.indexOf('safari') !== -1) {\n            return !(ua.indexOf('chrome') > -1);\n        }\n    }\n\n    get counter() {\n        let counter;\n\n        if (this.loop) {\n            counter = this.slideCounter % this.cellLength;\n        } else {\n            counter = this.slideCounter;\n        }\n\n        return counter + 1 + this.counterSeparator + this.cellLength;\n    }\n\n    get cellsElement() {\n        return this.elementRef.nativeElement.querySelector('.carousel-cells');\n    }\n\n    @Input()\n    set images(images: Images & any) {\n        this._images = images;\n    }\n    get images(){\n        return this._images;\n    }\n\n    @Output() events: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input() height: number = 200;\n    @Input() width: number;\n    @Input() loop: boolean = false;\n    @Input() autoplay: boolean = false;\n    @Input() autoplayInterval: number = 5000;\n    @Input() pauseOnHover: boolean = true;\n    @Input() dots: boolean = false;\n    @Input() borderRadius: number;\n    @Input() margin: number = 10;\n    @Input() objectFit: 'contain' | 'cover' | 'none' = 'cover';\n    @Input() minSwipeDistance: number = 10;\n    @Input() transitionDuration: number = 200;\n    @Input() transitionTimingFunction: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear' = 'ease';\n    @Input() videoProperties: any;\n    @Input() counterSeparator: string = \" / \";\n    @Input() overflowCellsLimit: number = 3;\n    @Input() listeners: 'auto' | 'mouse and touch' = 'mouse and touch';\n    @Input() cellsToShow: number;\n    @Input() cellsToScroll: number = 1;\n\n    @Input('cellWidth') set cellWidth(value: number | '100%') {\n        if (value){\n            this._cellWidth = value;\n        }\n    }\n\n    @Input('counter') set isCounter(value: boolean) {\n        if (value){\n            this._isCounter = value;\n        }\n    }\n    get isCounter() {\n        return this._isCounter && this.cellLength > 1;\n    }\n\n    get activeDotIndex() {\n        return this.slideCounter % this.cellLength;\n    }\n\n    @Input() arrows: boolean = true;\n    @Input() arrowsOutside: boolean;\n    @Input() arrowsTheme: 'light' | 'dark' = 'light';\n\n    get cellLimit() {\n        if (this.carousel) {\n            return this.carousel.cellLimit;\n        }\n    }\n\n    @HostBinding('class.carousel') hostClassCarousel: boolean = true;\n    @HostBinding('style.height') hostStyleHeight: string;\n    @HostBinding('style.width') hostStyleWidth: string;\n\n    @HostListener('window:resize', ['$event'])\n    onWindowResize(event: any) {\n        this.landscapeMode = this.isLandscape;\n        this.ref.detectChanges();\n\n        this.initCarousel();\n        this.carousel.lineUpCells();\n    }\n\n    @HostListener('mousemove', ['$event'])\n    onMousemove(event: MouseEvent) {\n        if (this.autoplay && this.pauseOnHover) {\n            this.carousel.stopAutoplay();\n        }\n    }\n\n    @HostListener('mouseleave', ['$event'])\n    onMouseleave(event: MouseEvent) {\n        if (this.autoplay && this.pauseOnHover) {\n            this.carousel.autoplay();\n        }\n    }\n\n    constructor(\n        private elementRef: ElementRef, \n        private ref: ChangeDetectorRef){\n    }\n\n    ngOnInit(){\n        this.isNgContent = this.cellsElement.children.length > 0;\n\n        this.touches = new Touches({\n            element: this.cellsElement,\n            listeners: this.listeners,\n            mouseListeners: {\n                \"mousedown\": \"handleMousedown\",\n                \"mouseup\": \"handleMouseup\"\n            }\n        });\n\n        this.touches.on('touchstart', this.handleTouchstart);\n        this.touches.on('horizontal-swipe', this.handleHorizontalSwipe);\n        this.touches.on('touchend', this.handleTouchend);\n        this.touches.on('mousedown', this.handleTouchstart);\n        this.touches.on('mouseup', this.handleTouchend);\n\n        this.initCarousel();\n        this.setDimensions();\n\n        if (this.autoplay) {\n            this.carousel.autoplay();\n        }\n    }\n\n    ngAfterViewInit() {\n        this.cellLength = this.getCellLength();\n        this.dotsArr = Array(this.cellLength).fill(1);\n        this.ref.detectChanges();\n        this.carousel.lineUpCells();\n\n        /* Start detecting changes in the DOM tree */\n        this.detectDomChanges();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.width || changes.height || changes.images) {\n            this.setDimensions();\n            this.initCarousel();\n            this.carousel.lineUpCells();\n            this.ref.detectChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.touches.destroy();\n        this.carousel.destroy();\n    }\n\n    initCarousel() {\n        this.carousel = new Carousel({\n            element: this.elementRef.nativeElement.querySelector('.carousel-cells'),\n            container: this.elementRef.nativeElement,\n            images: this.images,\n            cellWidth: this.getCellWidth(),\n            loop: this.loop,\n            autoplayInterval: this.autoplayInterval,\n            overflowCellsLimit: this.overflowCellsLimit,\n            visibleWidth: this.width,\n            margin: this.margin,\n            minSwipeDistance: this.minSwipeDistance,\n            transitionDuration: this.transitionDuration,\n            transitionTimingFunction: this.transitionTimingFunction,\n            videoProperties: this.videoProperties\n        });\n    }\n\n    detectDomChanges() {\n        const observer = new MutationObserver((mutations) => {\n            this.onDomChanges();\n        });\n\n        var config = { \n            attributes: true, \n            childList: true, \n            characterData: true \n        };\n        observer.observe(this.elementRef.nativeElement, config);\n    }\n\n    onDomChanges() {\n        this.cellLength = this.getCellLength();\n        this.carousel.lineUpCells();\n        this.ref.detectChanges();\n    }\n\n    setDimensions() {\n        this.hostStyleHeight = this.height + 'px';\n        this.hostStyleWidth = this.width + 'px';\n    }\n\n    getFile(index) {\n        return this.carousel.getFile(index);\n    }\n\n    /* Touchstart */\n    handleTouchstart = (event: any) => {\n        //event.preventDefault();\n        this.touches.addEventListeners(\"mousemove\", \"handleMousemove\");\n        this.carousel.handleTouchstart(event);\n        this.isMoving = true;\n    }\n\n    /* Touchmove */\n    handleHorizontalSwipe = (event: any) => {\n        event.preventDefault();\n        this.carousel.handleHorizontalSwipe(event);\n    }\n\n    /* Touchend */\n    handleTouchend = (event: any) => {\n        const touches = event.touches;\n        this.carousel.handleTouchend(event);\n        this.touches.removeEventListeners(\"mousemove\", \"handleMousemove\");\n        this.isMoving = false;\n    }\n\n    handleTransitionendCellContainer(event) {\n        this.carousel.handleSlideEnd();\n    }\n\n    toggleVideo(video) {\n        event.preventDefault();\n        if (this.videoProperties.noPlay) {\n            return;\n        }\n\n        if (video.paused) {\n            video.play();\n            this.isVideoPlaying = true;\n        } else {\n            video.pause();\n            this.isVideoPlaying = false;\n        }\n\n        this.ref.detectChanges();\n    }\n\n    getCurrentIndex() {\n        return this.carousel.slideCounter;\n    }\n\n    getCellWidth() {\n        let elementWidth = this.elementRef.nativeElement.clientWidth;\n\n        if (this.cellsToShow) {\n            let margin = this.cellsToShow > 1 ? this.margin : 0;\n            let totalMargin = margin * (this.cellsToShow - 1);\n            return (elementWidth - totalMargin) / this.cellsToShow;\n        }\n\n        if (this._cellWidth === '100%') {\n\n            return elementWidth;\n        } else {\n            return this._cellWidth;\n        }\n    }\n\n    next() {\n        this.carousel.next(this.cellsToScroll);\n        this.carousel.stopAutoplay();\n    }\n\n    prev() {\n        this.carousel.prev(this.cellsToScroll);\n        this.carousel.stopAutoplay();\n    }\n\n    select(index: number) {\n        this.carousel.select(index);\n    }\n\n    isNextArrowDisabled() {\n        return this.carousel.isNextArrowDisabled();\n    }\n\n    isPrevArrowDisabled() {\n        return this.carousel.isPrevArrowDisabled();\n    }\n\n    getCellLength() {\n        if (this.images) {\n            return this.images.length;\n        } else {\n            return this.cellsElement.children.length;\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n    declarations: [\n        CarouselComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        CarouselComponent\n    ],\n    providers: [\n\n    ],\n    bootstrap: [\n        \n    ],\n    entryComponents: [\n        CarouselComponent\n    ]\n})\nexport class IvyCarouselModule { }\n"]}