export interface Properties {
    element: HTMLElement;
    container: HTMLElement;
    images: any;
    cellWidth: number;
    loop: boolean;
    autoplayInterval: number;
    overflowCellsLimit: number;
    visibleWidth: number;
    margin: number;
    minSwipeDistance: number;
    transitionDuration: number;
    transitionTimingFunction: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear';
    videoProperties: any;
}
export declare class Carousel {
    properties: Properties;
    element: HTMLElement;
    startX: number;
    moveX: number;
    direction: 'left' | 'right';
    slideLength: number;
    distanceAbs: number;
    initialPositionX: number;
    cells: HTMLCollection;
    newContainerPositionIndex: number;
    preliminarySlideCounter: number;
    slideCounter: number;
    previousSlideCounter: number;
    isSlideInProgress: boolean;
    isMoveInProgress: boolean;
    isTouchstart: boolean;
    isSlideLengthLimited: boolean;
    isContainerPositionCorrection: boolean;
    containerInitialPositionX: number;
    isContentImages: boolean;
    visibleWidth: number;
    isLazyLoad: boolean;
    isContainerLocked: boolean;
    alignCells: "left" | "center";
    initialContainerPosition: number;
    autoplayId: any;
    get cellLength(): any;
    get totalContainerCellsCount(): any;
    get isFirstCell(): boolean;
    get lastCellIndex(): number;
    get overflowCellsLimit(): number;
    get isImagesLessCellLimit(): boolean;
    get cellLimit(): number;
    get images(): any;
    get margin(): number;
    get minSwipeDistance(): number;
    get transitionDuration(): number;
    get transitionTimingFunction(): "linear" | "ease" | "ease-in" | "ease-out" | "ease-in-out";
    get fullCellWidth(): number;
    get visibleCellsCount(): number;
    get lapCounter(): number;
    get visibleCellsOverflowContainer(): boolean;
    constructor(properties: Properties);
    handleTouchstart: (event: any) => void;
    stopTransformContainer(): void;
    getStartX(event: any): any;
    handleHorizontalSwipe: (event: any) => void;
    handleTouchend: (event: any) => void;
    moveContainer(): void;
    getMovePositionX(): number;
    alignContainer(duration?: number): void;
    getContainerPosition(): number;
    setInitialContainerPosition(position: any): void;
    getContainerPositionCorrection(): number;
    quicklyPositionContainer(): void;
    getNewContainerPosition(): number;
    setContainerWidth(): void;
    getContainerWidth(): number;
    getFile(cellIndex: any): {
        image: any;
        imageIndex: any;
    };
    getFileIndex(cellIndex: number): any;
    transformPositionX(value: any, duration?: number): void;
    detectSlide(): boolean;
    next(length?: number): void;
    prev(length?: number): void;
    select(index: number): void;
    handleSlide(customSlideLength?: number): void;
    handleLeftSlide(): void;
    handleRightSlide(): void;
    getSlideLength(): number;
    limitSlideLength(slideLength: number): number;
    detectLastSlide(slideCounter: number): boolean;
    isNextArrowDisabled(): boolean;
    isPrevArrowDisabled(): boolean;
    detectContainerUnlock(): boolean;
    handleSlideEnd(): void;
    transformSlideEnd(): void;
    setSlideCounter(): void;
    resetTransition(): void;
    getElementPosition(): DOMRect;
    getCarouselElementPosition(): DOMRect;
    getDistance(): number;
    getDistanceAbs(): number;
    getDirection(): "left" | "right";
    lineUpCells(): void;
    getCellPositionX(index: any): number;
    getPositionIndex(cellIndex: any): any;
    getCenterPositionIndex(): number;
    autoplay(): void;
    stopAutoplay(): void;
    destroy(): void;
}
